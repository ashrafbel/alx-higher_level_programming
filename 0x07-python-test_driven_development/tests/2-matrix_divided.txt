Import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

simple matrix:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 2)
    [[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]

negative div:
    >>> matrix_divided([[3, 6, 12], [2, 4, 6]], -2)
    [[-1.5, -3.0, -6.0], [-1.0, -2.0, -3.0]]

infinity div:
    >>> matrix_divided([[3, 6, 12], [2, 4, 6]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

nan div:
    >>> matrix_divided([[4, 8, 16], [3, 6, 9]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

Test division by zero:
    >>> matrix_divided([[9, 4, 5], [3, 1, 2]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

unmodified matrix:
    >>> m = [[3, 6, 12], [2, 4, 6]]
    >>> result = matrix_divided(m, 3)
    >>> result
    [[1.0, 2.0, 4.0], [0.67, 1.33, 2.0]]
    >>> m[1][1]
    4

one element of matrix:
    >>> matrix_divided([[7]], 4)
    [[1.75]]

1st arg None:
    >>> matrix_divided(None, 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

empty matrix:
    >>> matrix_divided([[]], 10)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided([[], [], []], 7)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
