Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:
    >>> L = MyList()
    >>> type(L) == MyList
    True

Correct Instance test:
    >>> L = MyList()
    >>> isinstance(L, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> L.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> L.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> L.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list test:
    >>> L = MyList()
    >>> L.print_sorted()
    []

list one:
    >>> L = MyList([3, 11, 2])
    >>> L.print_sorted()
    [2, 3, 11]

list 2:
    >>> L = MyList([2, 5, 3, 4, 6])
    >>> L.print_sorted()
    [2, 3, 4, 5, 6]

list 3 negative integers:
    >>> L = MyList([-500, -75, -123456, 0, -9876543, -21])
    >>> L.print_sorted()
    [-9876543, -123456, -500, -21, -75, 0]

Original list unchanged:
    >>> L = MyList([5, 15, 3, -5, 25, 50, 0])
    >>> L.print_sorted()
    [-5, 0, 3, 5, 15, 25, 50]
    >>> L
    [5, 15, 3, -5, 25, 50, 0]

List already in order:
    >>> L = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> L.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

append ints:
    >>> L = MyList()
    >>> L.append(78)
    >>> L
    [78]
